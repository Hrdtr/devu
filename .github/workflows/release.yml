name: release

on:
  push:
    branches:
      - alpha
      - beta
      - stable

permissions:
  contents: write
      
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.release-draft.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare GitHub release draft
        id: release-draft
        uses: actions/github-script@v7
        env:
          PACKAGE_VERSION: ${{ steps.get-version.outputs.version }}
          REF_NAME: ${{ github.ref_name }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              target_commitish: process.env.REF_NAME,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install.',
              prerelease: process.env.REF_NAME !== 'stable',
              draft: true,
            })
            return data.id

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './apps/devu/tauri -> target'

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: bun install --frozen-lockfile
        env:
          # Explicitly set the build target triple for macOS x86_64 builds.
          # The `macos-latest` runner runs on arm64 hardware, which breaks auto-detection.
          # This ensures consistent cross-compilation targeting x86_64-apple-darwin.
          # See: https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
          API_BUILD_TARGET_TRIPLE: ${{ matrix.platform == 'macos-latest' && contains(matrix.args, 'x86_64-apple-darwin') && 'x86_64-apple-darwin' || '' }}

      - name: patch MSI versions (Windows only)
        if: matrix.platform == 'windows-latest'
        run: bun run ./scripts/conf-semver-to-msi-version.ts

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          projectPath: 'apps/devu'
          tauriScript: 'bun run tauri'
          releaseId: ${{ needs.create-release.outputs.id }}
          includeDebug: ${{ github.ref_name != 'stable' }}
          includeUpdaterJson: true
          args: >-
            ${{ github.ref_name == 'alpha' && '--config tauri/tauri.alpha.conf.json ' ||  github.ref_name == 'beta' && '--config tauri/tauri.beta.conf.json ' ||  '' }}${{ matrix.args }}
